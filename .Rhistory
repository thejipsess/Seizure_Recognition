# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
dev.off()
?volcanoplot
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t24 with treox
title("hi")
# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
dev.off()
# Factorise the grouping variables
timepoints_reox <- factor(c(rep(c("t24", "treox"), each=3)))
samples_reox = factor(c("I", "III", "IIII", "I", "II", "III"))
design<- model.matrix(~ 0 + samples_reox + timepoints_reox)
colnames(design)<- c("I", "II", "III", "IIII", "treox")
# Fit a linear model
fit_reox<- lmFit(data_norm[,7:12], design)
fit_eb = eBayes(fit_reox)
stat_overview_treox = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t24 vs treox)
fit_eb$p.value[1:4,]
# Generate volcano plot
pdf(file = "Output/Volcano plot t24 vs treox.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t24 with treox
title("t24 vs treox")
dev.off()
# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
dev.off()
volcanoplot(fit_eb, coef = 5)
volcanoplot(fit_eb, coef = 6)
# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
dev.off()
# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
dev.off()
# Factorise the grouping variables
timepoints_reox <- factor(c(rep(c("t24", "treox"), each=3)))
samples_reox = factor(c("I", "III", "IIII", "I", "II", "III"))
design<- model.matrix(~ 0 + samples_reox + timepoints_reox)
colnames(design)<- c("I", "II", "III", "IIII", "treox")
# Fit a linear model
fit_reox<- lmFit(data_norm[,7:12], design)
fit_eb = eBayes(fit_reox)
stat_overview_treox = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t24 vs treox)
fit_eb$p.value[1:4,]
# Generate volcano plot
pdf(file = "Output/Volcano plot t24 vs treox.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t24 with treox
title("t24 vs treox")
dev.off()
volcanoplot(fit_eb, coef = 5)
# Factorise the grouping variables
timepoints_hypo <- factor(c(rep(c("t0", "t8", "t24"), each=3)))
samples_hypo = factor(c("I", "II", "III", "I", "II", "III", "I", "III", "IIII"))
design<- model.matrix(~ 0 + samples_hypo + timepoints_hypo)
colnames(design)<- c("I", "II", "III", "IIII", "t24", "t8")
# Fit a linear model
fit_hypo<- lmFit(data_norm[,1:9], design)
fit_eb = eBayes(fit_hypo)
stat_overview_t8 = topTable(fit_eb, coef = 6) # Get info about top 10 DEG's (t0 vs t8)
stat_overview_t24 = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t vs t24)
fit_eb$p.value[1:4,]
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
pdf(file = "Output/Volcano plot t0 vs t8.pdf")
volcanoplot(fit_eb, coef = 6) # Create volcano plot comparing t0 with t8
title("t0 vs t8")
dev.off()
pdf(file = "Output/Volcano plot t0 vs t24.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t0 with t24
title("t0 vs t24")
dev.off()
# Factorise the grouping variables
timepoints_reox <- factor(c(rep(c("t24", "treox"), each=3)))
samples_reox = factor(c("I", "III", "IIII", "I", "II", "III"))
design<- model.matrix(~ 0 + samples_reox + timepoints_reox)
colnames(design)<- c("I", "II", "III", "IIII", "treox")
# Fit a linear model
fit_reox<- lmFit(data_norm[,7:12], design)
fit_eb = eBayes(fit_reox)
stat_overview_treox = topTable(fit_eb, coef = 5) # Get info about top 10 DEG's (t24 vs treox)
fit_eb$p.value[1:4,]
# Generate volcano plot
pdf(file = "Output/Volcano plot t24 vs treox.pdf")
volcanoplot(fit_eb, coef = 5) # Create volcano plot comparing t24 with treox
title("t24 vs treox")
dev.off()
volcanoplot(fit_eb, coef = 5)
title("t24 vs treox")
# Let's load a reference dataset
Y_genes = read.delim("Data/Y_chromosome_EnsemblGeneIDs.txt")
Y_genes = merge(Y_genes, data_final, by = 1)
# Add gene symbols and description to dataset
ensembl = useMart("ensembl", "hsapiens_gene_ensembl")
gene_ids = rownames(data_norm);
annotation = getBM(attributes = c("ensembl_gene_id", 'hgnc_symbol'),
filter = "ensembl_gene_id",
values =  gene_ids,
mart = ensembl)
data_final = merge(data_norm, annotation, by.x = 0, by.y = 1, all = TRUE)
colnames(data_final)[1] = "ENSEMBL ID"
colnames(data_final)[14] = "Gene Symbol"
# The code below adds description but introduces addtional rows due to multiple descriprions
# Therefore, it is commented out.
# description = getBM(attributes = c("ensembl_gene_id", 'interpro_description'),
#                    filter = "ensembl_gene_id",
#                    values =  gene_ids,
#                    mart = ensembl,
#                    uniqueRows = TRUE)
# description = description[uunion(description[,1]), ]
#
#
# data_final = merge(data_final, description, by = 1, all = TRUE)
# colnames(data_final)[1] = "ENSEMBL ID"
# colnames(data_final)[14:15] = c("Gene Symbol", "Gene Description")
View(data_final)
# Let's load a reference dataset
Y_genes = read.delim("Data/Y_chromosome_EnsemblGeneIDs.txt")
Y_genes = merge(Y_genes, data_final, by = 1)
# Calculate mean background expression
background_expr = mean(as.numeric(unlist(Y_genes[,2:13]), na.rm = TRUE))
# Determine which genes are above background
aboveBG = data_final[which(rowMeans(data_final[,2:13])>background_expr),]
aboveBG = data.frame(aboveBG[,1], TRUE)
belowBG = data_final[which(rowMeans(data_final[,2:13])<=background_expr),]
belowBG = data.frame(belowBG[,1], FALSE)
colnames(aboveBG) = c("ENSEMBL ID", "aboveBackground")
colnames(belowBG) = c("ENSEMBL ID", "aboveBackground")
# implement results in dataset
data_final = merge(data_final, aboveBG, by = 1, all = TRUE)
data_final[is.na(data_final$aboveBackground),15] = FALSE
write.table(data_final, "Output/Hypoxia Final Dataset.txt", sep = ",",
row.names = FALSE)
write.table(x, file, append = FALSE, sep = " ", dec = ".",
row.names = TRUE, col.names = TRUE)
write.table(data_final, "Output/Hypoxia Final Dataset.txt", sep = ",",
row.names = FALSE)
View(data_final)
description = getBM(attributes = c("ensembl_gene_id", 'interpro_description'),
filter = "ensembl_gene_id",
values =  gene_ids,
mart = ensembl,
uniqueRows = TRUE)
description = description[uunion(description[,1]), ]
View(description)
description = description[!duplicated(description$ensembl_gene_id),]
View(description)
data_final = merge(data_final, description, by = 1, all = TRUE)
colnames(data_final)[1] = "ENSEMBL ID"
colnames(data_final)[14:15] = c("Gene Symbol", "Gene Description")
View(data_final)
# Let's load a reference dataset
Y_genes = read.delim("Data/Y_chromosome_EnsemblGeneIDs.txt")
Y_genes = merge(Y_genes, data_final, by = 1)
# Calculate mean background expression
background_expr = mean(as.numeric(unlist(Y_genes[,2:13]), na.rm = TRUE))
# Determine which genes are above background
aboveBG = data_final[which(rowMeans(data_final[,2:13])>background_expr),]
aboveBG = data.frame(aboveBG[,1], TRUE)
belowBG = data_final[which(rowMeans(data_final[,2:13])<=background_expr),]
belowBG = data.frame(belowBG[,1], FALSE)
colnames(aboveBG) = c("ENSEMBL ID", "aboveBackground")
colnames(belowBG) = c("ENSEMBL ID", "aboveBackground")
# implement results in dataset
data_final = merge(data_final, aboveBG, by = 1, all = TRUE)
data_final[is.na(data_final$aboveBackground),15] = FALSE
# Let's load a reference dataset
Y_genes = read.delim("Data/Y_chromosome_EnsemblGeneIDs.txt")
Y_genes = merge(Y_genes, data_final, by = 1)
# Calculate mean background expression
background_expr = mean(as.numeric(unlist(Y_genes[,2:13]), na.rm = TRUE))
# Determine which genes are above background
aboveBG = data_final[which(rowMeans(data_final[,2:13])>background_expr),]
aboveBG = data.frame(aboveBG[,1], TRUE)
belowBG = data_final[which(rowMeans(data_final[,2:13])<=background_expr),]
belowBG = data.frame(belowBG[,1], FALSE)
colnames(aboveBG) = c("ENSEMBL ID", "aboveBackground")
colnames(belowBG) = c("ENSEMBL ID", "aboveBackground")
# implement results in dataset
data_final = merge(data_final, aboveBG, by = 1, all = TRUE)
data_final[is.na(data_final$aboveBackground),15] = FALSE
write.table(data_final, "Output/Hypoxia Final Dataset.txt", sep = ",",
row.names = FALSE)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("anamiR")
BiocManager::install("anamiR")
R.version.
R.version.string
install.packages("pacman")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea"))
# Install prerequisite packages
install.packages('Rtools')
# Install prerequisite packages
install.packages('rtools')
# Install prerequisite packages
install.Rtools
# Install prerequisite packages
install.Rtools()
install.Rtools()
install.packages("pacman")
install.packages("pacman")
# Install prerequisite packages
install.packages("pacman")
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea"))
# Install the MetaboAnalyst package
# Step 1: Install devtools
install.packages("devtools")
library(devtools)
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
library(devtools)
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
mSet<-InitDataObjects("conc", "stat", FALSE)
library(MetaboAnalystR)
library(pacman)
pacman::p_load(c("impute", "pcaMethods", "globaltest", "GlobalAncova", "Rgraphviz", "preprocessCore", "genefilter", "SSPA", "sva", "limma", "KEGGgraph", "siggenes","BiocParallel", "MSnbase", "multtest","RBGL","edgeR","fgsea"))
library(devtools)
# Step 2: Install MetaboAnalystR with documentation
devtools::install_github("xia-lab/MetaboAnalystR", build = TRUE, build_vignettes = TRUE, build_manual =T)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
```{r pressure, echo=FALSE}
knitr::opts_chunk$set(echo = TRUE)
current_path <- getActiveDocumentContext()$path
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source('packages.R')
x = read.csv('../Data/data.csv', check.names = FALSE)
getwd()
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source('packages.R')
getwd()
getActiveDocumentContext()$path
getActiveDocumentContext()$path
getActiveDocumentContext()
getActiveDocumentContext()
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source('packages.R')
dirname(current_path)
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source('packages.R')
getwd()
setwd(dirname(current_path))
getwd()
x = read.csv('Data/data.csv', check.names = FALSE)
View(x)
x = read.csv('Data/data.csv', sep = ';', check.names = FALSE)
View(x)
View(x)
x = read.csv('Data/data.csv', sep = ';')
View(x)
nullsum = sum(x)
x
x[1,1]
x[,1:-1]
x[,1:]
rownames(x) <- x$X
View(x)
x = read.csv('Data/data.csv', sep = ';', row.names = 'X')
View(x)
sum(x)
sum(x)
View(x)
x[1,1]
x[1:5]
sum(x[1:5])
y = x$y
x = subset(x, select = -y)
View(x)
#Load data
x = read.csv('Data/data.csv', sep = ';', row.names = 'X')
# Isolate y
y = x$y
# remove y column from x
x = subset(x, select = -y)
View(x)
nullsum = sum(x)
x = read.csv('Data/data.csv', sep = ';', row.names = 'X')
# Remove rows with missing data
x <- na.omit(x)
# Isolate y
y <- x$y
# remove y column from x
x <- subset(x, select = -y)
nullsum = sum(x)
complete.cases(x)
!complete.cases(x)
nullsum = sum(!complete.cases(x))
pca <- prcomp(x, scale=TRUE)
plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="Scree plot", xlab="Principal component", ylab='Percent variation')
barplot(pca.var.per, main="PCA plot", xlab="Principal component", ylab='Percent variation')
pca <- prcomp(x, scale=TRUE)
plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="PCA plot", xlab="Principal component", ylab='Percent variation')
if (!requireNamespace("ggplot2", quietly = TRUE))
install.packages("ggplot2")
library(ggplot2)
pca.data <- data.frame(Sample=y, X = pca$x[,1], Y = pca$x[,2])
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample), geom_text(), xlab(paste("PC1 - ", pca.var.per[,1], "%", sep="")),
ylab(paste("PC2 - ", pca.var.per[,2], "%", sep="")), theme_bw(), ggtitle("PCA plot"))
X
pca.data
pca.data$X
pca.data$Y
View(pca.data)
View(pca.data)
pca <- prcomp(x, scale=TRUE)
plot(pca$x[,1], pca$x[,2])
pca.var <- pca$sdev^2
pca.var.per <- round(pca.var/sum(pca.var)*100, 1)
barplot(pca.var.per, main="PCA plot", xlab="Principal component", ylab='Percent variation')
pca.data <- data.frame(Sample=y, X = pca$x[,1], Y = pca$x[,2])
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample), geom_text(), xlab(paste("PC1 - ", pca.var.per[,1], "%", sep="")),
ylab(paste("PC2 - ", pca.var.per[,2], "%", sep="")), theme_bw(), ggtitle("PCA plot"))
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample))
ggplot(data = pca.data, aes(x=X, y=Y))
plot(pca.data$X, pca.data$Y)
ggplot(data = pca.data, aes(X, Y))
ggplot(data = pca.data, mapping = aes(X, Y))
plot(pca.data$X, pca.data$Y)
ggplot(data = pca.data, mapping = aes(X, Y))
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample)) +
geom_text() +
lab(paste("PC1 - ", pca.var.per[,1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[,2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[,1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[,2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
pca.var.per[,1]
pca.var.per
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample)) +
geom_text() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample)) +
geom_col() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(cyl))) +
geom_col() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
geom_col() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample)))
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample)))
ggplot(data = pca.data, aes(x=X, y=Y, color = factor(Sample)))
ggplot(data = pca.data, aes(x=X, y=Y, color = factor(Sample)))
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
geom_dotplot() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
geom_dotplot() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
geom_point() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
ggplot(data = pca.data, aes(x=X, y=Y, label = Sample, color = factor(Sample))) +
geom_point() +
xlab(paste("PC1 - ", pca.var.per[1], "%", sep="")) +
ylab(paste("PC2 - ", pca.var.per[2], "%", sep="")) +
theme_bw() +
ggtitle("PCA plot")
View(pca.data)
unique(y)
knitr::opts_chunk$set(echo = TRUE)
library(rstudioapi)
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path))
source('packages.R')
unlink('main_cache', recursive = TRUE)
